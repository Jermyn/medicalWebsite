{"ast":null,"code":"import _objectSpread from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/PlaybackMap.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchMaps as _fetchMaps, confirmType as _confirmType, fetchDeviceLocations as _fetchDeviceLocations } from \"./actions/index\";\nimport MapGL, { Marker, Popup, NavigationControl } from 'react-map-gl';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { Source, Layer, Feature } from \"react-mapbox-gl\";\nimport Slider from '@material-ui/lab/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport mapboxgl from 'mapbox-gl'; // import StatePin from './StatePin'\n\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nvar e = React.createElement;\nvar restUrlHTTPS = \"http://137.132.165.139:3000/api\";\nvar TOKEN = 'pk.eyJ1IjoiZnlwZW5nIiwiYSI6ImNqcmFlazM4YjAxejkzeW1wbWg2Zmp2aWsifQ.obOnEjbqcpEWu9HIh6zPlw'; // Set your mapbox token here\n\nvar graphqlUrlHTTPS = 'http://137.132.165.139:3000/graphql';\nvar ReactMap = ReactMapboxGl({\n  accessToken: \"\".concat(TOKEN),\n  maxZoom: 13,\n  minZoom: 8\n});\nvar navStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    maps: state.maps,\n    devices: state.devices,\n    deviceLogs: state.deviceLogs,\n    patients: state.patients,\n    info: state.info\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    confirmType: function confirmType(type) {\n      return dispatch(_confirmType(type));\n    },\n    fetchMaps: function fetchMaps(maps) {\n      return dispatch(_fetchMaps(maps));\n    },\n    fetchDeviceLocations: function fetchDeviceLocations(deviceLogs) {\n      return dispatch(_fetchDeviceLocations(deviceLogs));\n    }\n  };\n};\n\nvar InfoMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InfoMap, _Component);\n\n  function InfoMap(props) {\n    var _this;\n\n    _classCallCheck(this, InfoMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfoMap).call(this, props));\n\n    _this.startPlayback = function () {\n      var value = _this.state.value;\n      value += 1;\n\n      if (value < _this.state.max && _this.state.playback == false) {\n        _this.timer = setInterval(function () {\n          return _this.playback();\n        }, 100);\n\n        _this.setState({\n          playback: true\n        });\n      }\n    };\n\n    _this.stopTimer = function () {\n      clearInterval(_this.timer);\n\n      _this.setState({\n        playback: false\n      });\n    };\n\n    _this.playback = function () {\n      var value = _this.state.value;\n      value += 1;\n\n      if (value > _this.state.max) {\n        _this.stopTimer();\n      } else {\n        _this.handleChange('', value);\n      }\n    };\n\n    _this.fetch = function (dispatch) {\n      var query = \"\\n      query {\\n        maps {\\n          id\\n          scale\\n          coordinates\\n          imageURL\\n          navMesh\\n          navPath\\n          pois\\n        }\\n      }\\n    \";\n\n      _this.request({\n        query: query\n      }).then(function (data) {\n        var loading = _this.state.loading;\n\n        if (loading) {}\n\n        _this.props.fetchMaps(data.data.data.maps);\n      });\n    };\n\n    _this.request = function (_ref) {\n      var query = _ref.query,\n          variables = _ref.variables;\n      var promise = axios({\n        method: 'post',\n        url: \"\".concat(graphqlUrlHTTPS),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: JSON.stringify({\n          query: query,\n          variables: variables\n        })\n      });\n      return promise;\n    };\n\n    _this.updateSlider = function () {\n      var lengthSlider = _this.props.locationData.length - 1;\n\n      _this.setState({\n        max: lengthSlider\n      });\n    };\n\n    _this.getDeviceLogs = function (dispatch) {\n      var promise = axios({\n        method: 'get',\n        url: \"\".concat(restUrlHTTPS, \"/Devices/logs\"),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (data) {\n        _this.props.fetchDeviceLocations(data.data);\n      });\n      return promise;\n    };\n\n    _this.mapgl = function () {\n      return _this.refs.map.getChildContext().map;\n    };\n\n    _this.getChildContext = function () {\n      return {\n        map: _this.map\n      };\n    };\n\n    _this.createBeaconMarkers = function (initialize) {\n      var map = _this.state.map;\n\n      if (initialize != null) {\n        map = initialize;\n      }\n\n      if (map != \"\") {\n        var mobileDevices = [];\n        var newObj = JSON.parse(JSON.stringify(_this.props.locationData[_this.state.value]._source));\n        if (_this.props.info != \"\" && _this.props.info != null) newObj.id = _this.props.info.name;\n        mobileDevices.push(newObj);\n\n        _this.setState({\n          mobileDevices: mobileDevices\n        });\n      }\n    };\n\n    _this.initializeMap = function (map, jump) {\n      _this.setState({\n        initial: map\n      });\n\n      _this.setState({\n        map: map\n      });\n\n      var sourceOptions = {\n        coordinates: map != null ? map.coordinates : undefined,\n        type: 'image',\n        url: map != null ? map.imageURL : undefined\n      };\n\n      _this.setState({\n        sourceOptions: sourceOptions\n      });\n\n      if (map != \"\") {\n        var bounds = new mapboxgl.LngLatBounds(_this.__guard__(map != null ? map.coordinates : undefined, function (x) {\n          return x[3];\n        }), _this.__guard__(map != null ? map.coordinates : undefined, function (x1) {\n          return x1[1];\n        }));\n        var center = bounds.getCenter();\n\n        _this.setState({\n          center: center\n        });\n\n        var filteredLogs = _this.props.deviceLogs.filter(function (device) {\n          return device.map.id == map.id;\n        });\n\n        var mobileDevices = [];\n        filteredLogs.map(function (device) {\n          _this.props.patients.forEach(function (patient) {\n            if (device.id == patient.beacon) {\n              //CHANGE TO PATIENT NAME\n              var newObj = JSON.parse(JSON.stringify(device));\n              newObj.id = patient.name;\n              mobileDevices.push(newObj);\n            }\n          });\n        });\n\n        _this.setState({\n          mobileDevices: mobileDevices\n        });\n\n        var staticDevices = _this.props.devices.filter(function (device) {\n          return device.type == 'static';\n        });\n\n        staticDevices = staticDevices.filter(function (device) {\n          return device.location != null;\n        });\n        staticDevices = staticDevices.filter(function (device) {\n          return device.location.map.id == map.id;\n        });\n\n        _this.setState({\n          staticDevices: staticDevices\n        });\n\n        _this.setState({\n          loading: false\n        });\n\n        _this.createBeaconMarkers(map);\n      }\n    };\n\n    _this.onStyleLoad = function (mapgl) {\n      var _this$props = _this.props,\n          onLoad = _this$props.onLoad,\n          map = _this$props.map;\n\n      if (map != null) {\n        _this.initializeMap(map);\n      }\n    };\n\n    _this.getCirclePaint = function () {\n      return {\n        'circle-radius': _this.state.circleRadius,\n        'circle-color': '#FFFF00',\n        'circle-opacity': 0.4\n      };\n    };\n\n    _this._resize = function () {\n      _this.setState({\n        viewport: _objectSpread({}, _this.state.viewport, {\n          width: '100%',\n          height: '70vh'\n        })\n      });\n    };\n\n    _this._updateViewport = function (viewport) {\n      _this.setState({\n        viewport: viewport\n      });\n    };\n\n    _this.__guard__ = function (value, transform) {\n      return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;\n    };\n\n    _this.renderHighlightDevices = function () {\n      var patients = _this.props.patients;\n      var beacons = _this.state.mobileDevices;\n      var devices = [];\n\n      var _loop = function _loop(i) {\n        beacons.map(function (device) {\n          if (patients[i].beacon == device.id && patients[i].highlight == true) {\n            devices.push(React.createElement(Feature, {\n              key: device.id,\n              coordinates: [device.lng, device.lat],\n              properties: {\n                title: device.id,\n                id: device.id\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 304\n              },\n              __self: this\n            }));\n          }\n        });\n      };\n\n      for (var i = 0; i < patients.length; i++) {\n        _loop(i);\n      }\n\n      return devices;\n    };\n\n    _this.renderDevices = function (type) {\n      var devices = [];\n      var createDevices = [];\n      if (type == 'static') createDevices = _this.state.staticDevices.map(function (device) {\n        devices.push(React.createElement(Feature, {\n          key: device.id,\n          coordinates: [device.location.lng, device.location.lat],\n          properties: {\n            title: device.id,\n            id: device.id\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }));\n      });else {\n        createDevices = _this.state.mobileDevices.map(function (device) {\n          devices.push(React.createElement(Feature, {\n            key: device.id,\n            coordinates: [device.lng, device.lat],\n            properties: {\n              title: device.id,\n              id: device.id\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335\n            },\n            __self: this\n          }));\n        });\n      }\n      return devices;\n    };\n\n    _this.formatUnix = function () {\n      var unix = _this.props.locationData[_this.state.value]._source.time / 1000;\n      var months_arr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      var date = new Date(unix * 1000);\n      var year = date.getFullYear();\n      var month = months_arr[date.getMonth()];\n      var day = date.getDate();\n      var hours = date.getHours();\n      var minutes = \"0\" + date.getMinutes();\n      var seconds = \"0\" + date.getSeconds();\n      var convdataTime = day + '-' + month + '-' + year + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      return convdataTime;\n    };\n\n    _this.handleChange = function (event, value) {\n      _this.setState({\n        value: value\n      });\n\n      if (_this.props.locationData[value]._source.map.id != _this.state.map.id) {\n        var map = \"\";\n\n        _this.props.maps.map(function (displayMap) {\n          if (displayMap.id == _this.props.locationData[_this.state.value]._source.map.id) {\n            map = displayMap;\n            var newObj = JSON.parse(JSON.stringify(displayMap));\n\n            _this.setState({\n              map: newObj\n            });\n          }\n        });\n\n        _this.initializeMap(map);\n      }\n\n      _this.createBeaconMarkers();\n    };\n\n    _this.renderPopup = function () {\n      return _this.state.popupInfo && React.createElement(Popup, {\n        tipSize: 5,\n        anchor: \"bottom-right\",\n        longitude: _this.state.popupInfo.state.longitude,\n        latitude: _this.state.popupInfo.state.latitude,\n        onClose: function onClose() {\n          return _this.setState({\n            popupInfo: null\n          });\n        },\n        closeOnClick: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, _this.state.popupInfo.state.fullName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, _this.state.popupInfo.incidentNumber, \" \", _this.state.popupInfo.disaster, \" incident(s)\"), React.createElement(\"div\", {\n        class: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _this.state.popupInfo.icon.imgUrl,\n        style: {\n          height: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      })));\n    };\n\n    _this.state = {\n      viewport: {\n        latitude: 37.785164,\n        longitude: -100,\n        zoom: 2.8,\n        bearing: 0,\n        pitch: 0,\n        width: 500,\n        height: 500\n      },\n      popupInfo: null,\n      map: '',\n      loading: true,\n      sourceOptions: {},\n      center: [-0.2416815, 51.5285582],\n      staticDevices: \"\",\n      mobileDevices: [],\n      circleRadius: 30,\n      value: 0,\n      max: 6,\n      playback: false\n    }; // this.mapLocation = React.createRef(),\n    // this.inputNew = React.createRef()\n\n    return _this;\n  }\n\n  _createClass(InfoMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetch();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._resize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (this.props.locationData != prevProps.locationData) {\n        this.updateSlider();\n\n        if (this.state.map == '' && this.state.loading == true && this.props.locationData.length != 0) {\n          var map = '';\n          var locationData = this.props.locationData;\n          this.props.maps.map(function (displayMap) {\n            if (displayMap.id == locationData[_this2.state.value]._source.map.id) {\n              map = displayMap;\n              var newObj = JSON.parse(JSON.stringify(displayMap));\n\n              _this2.setState({\n                map: newObj\n              });\n            }\n          });\n          this.initializeMap(map);\n          this.setState({\n            loading: false\n          });\n        }\n\n        this.createBeaconMarkers();\n      }\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        map: this.state.map\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var viewport = this.state.viewport;\n      var sourceOptions = this.state.sourceOptions;\n      var imageURL = \"mapbox://styles/mapbox/dark-v9\";\n      var center = this.state.center;\n\n      if (this.props.map != \"\") {}\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          onLoad = _this$props2.onLoad,\n          map = _this$props2.map,\n          height = _this$props2.height,\n          width = _this$props2.width;\n      var locationOrigin = window.location.origin;\n      var style = {\n        version: 8,\n        name: 'custom',\n        sources: {},\n        sprite: \"\".concat(locationOrigin, \"/mapbox-styles/maki\"),\n        glyphs: \"\".concat(locationOrigin, \"/mapbox-styles/font/{fontstack}/{range}.pbf\"),\n        layers: []\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, React.createElement(ReactMap, {\n        style: style,\n        center: center,\n        movingMethod: 'jumpTo',\n        ref: this.mapLocation,\n        containerStyle: {\n          height: '70vh',\n          width: '100%'\n        },\n        onStyleLoad: this.onStyleLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"staticDevices\",\n        layout: {\n          'icon-image': 'triangle-15',\n          'icon-allow-overlap': true,\n          'icon-ignore-placement': true,\n          'text-allow-overlap': true,\n          'text-ignore-placement': true,\n          'text-field': '{title}',\n          'text-font': ['Open Sans Semibold'],\n          'text-offset': [0, 0.8],\n          'text-anchor': 'top'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }), React.createElement(Layer, {\n        type: \"circle\",\n        paint: this.getCirclePaint(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, this.renderHighlightDevices()), React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"patientDevices\",\n        layout: {\n          'icon-image': 'marker-15',\n          'icon-allow-overlap': true,\n          'icon-ignore-placement': true,\n          'text-allow-overlap': true,\n          'text-ignore-placement': true,\n          'text-field': '{title}',\n          'text-font': ['Open Sans Semibold'],\n          'text-offset': [0, 0.8],\n          'text-anchor': 'top'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }, this.renderDevices('mobile')), this.state.map != \"\" ? React.createElement(Source, {\n        id: \"image_source\",\n        tileJsonSource: sourceOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }) : null, React.createElement(Layer, {\n        id: \"image_layer\",\n        before: \"staticDevices\",\n        type: \"raster\",\n        sourceId: \"image_source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      })), this.state.map != \"\" ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, this.state.playback == false ? React.createElement(Button, {\n        onClick: this.startPlayback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, \" Playback \") : React.createElement(Button, {\n        onClick: this.stopTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \" Stop \"), React.createElement(Typography, {\n        variant: \"subtitle1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, this.props.locationData.length != 0 ? this.formatUnix() : this.state.value), React.createElement(Slider, {\n        value: this.state.value,\n        min: 0,\n        max: this.state.max,\n        step: 1,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        style: {\n          marginTop: '1em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, this.props.locationData.length != 0 ? \"Location: \".concat(this.props.locationData[this.state.value]._source.map.id) : null, \" \")) : null);\n    }\n  }]);\n\n  return InfoMap;\n}(Component);\n\nvar ConnectedInfoMap = connect(mapStateToProps, mapDispatchToProps)(InfoMap);\nexport default ConnectedInfoMap;","map":{"version":3,"sources":["/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/PlaybackMap.js"],"names":["React","Component","connect","fetchMaps","confirmType","fetchDeviceLocations","MapGL","Marker","Popup","NavigationControl","ReactMapboxGl","Source","Layer","Feature","Slider","Typography","Button","mapboxgl","withStyles","axios","e","createElement","restUrlHTTPS","TOKEN","graphqlUrlHTTPS","ReactMap","accessToken","maxZoom","minZoom","navStyle","position","top","left","padding","mapStateToProps","state","maps","devices","deviceLogs","patients","info","mapDispatchToProps","dispatch","type","InfoMap","props","startPlayback","value","max","playback","timer","setInterval","setState","stopTimer","clearInterval","handleChange","fetch","query","request","then","data","loading","variables","promise","method","url","headers","JSON","stringify","updateSlider","lengthSlider","locationData","length","getDeviceLogs","mapgl","refs","map","getChildContext","createBeaconMarkers","initialize","mobileDevices","newObj","parse","_source","id","name","push","initializeMap","jump","initial","sourceOptions","coordinates","undefined","imageURL","bounds","LngLatBounds","__guard__","x","x1","center","getCenter","filteredLogs","filter","device","forEach","patient","beacon","staticDevices","location","onStyleLoad","onLoad","getCirclePaint","circleRadius","_resize","viewport","width","height","_updateViewport","transform","renderHighlightDevices","beacons","i","highlight","lng","lat","title","renderDevices","createDevices","formatUnix","unix","time","months_arr","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","convdataTime","substr","event","displayMap","renderPopup","popupInfo","longitude","latitude","fullName","incidentNumber","disaster","icon","imgUrl","zoom","bearing","pitch","window","removeEventListener","prevProps","prevState","children","locationOrigin","origin","style","version","sources","sprite","glyphs","layers","mapLocation","marginTop","ConnectedInfoMap"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchMaps, confirmType, fetchDeviceLocations } from \"./actions/index\";\r\nimport MapGL, {Marker, Popup, NavigationControl} from 'react-map-gl';\r\nimport ReactMapboxGl from 'react-mapbox-gl';\r\nimport { Source, Layer, Feature } from \"react-mapbox-gl\";\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport mapboxgl from 'mapbox-gl';\r\n// import StatePin from './StatePin'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nconst e             = React.createElement;\r\n\r\nconst restUrlHTTPS = `http://137.132.165.139:3000/api`;\r\n\r\nconst TOKEN = 'pk.eyJ1IjoiZnlwZW5nIiwiYSI6ImNqcmFlazM4YjAxejkzeW1wbWg2Zmp2aWsifQ.obOnEjbqcpEWu9HIh6zPlw'; // Set your mapbox token here\r\nconst graphqlUrlHTTPS = 'http://137.132.165.139:3000/graphql';\r\n\r\nconst ReactMap = ReactMapboxGl({\r\n  accessToken: `${TOKEN}`,\r\n  maxZoom:    13,\r\n  minZoom:    8,\r\n})\r\nconst navStyle = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  padding: '10px'\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    maps: state.maps,\r\n    devices: state.devices,\r\n    deviceLogs: state.deviceLogs,\r\n    patients: state.patients,\r\n    info: state.info\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    confirmType: type => dispatch(confirmType(type)),\r\n    fetchMaps: maps => dispatch(fetchMaps(maps)),\r\n    fetchDeviceLocations: deviceLogs => dispatch(fetchDeviceLocations(deviceLogs))\r\n  };\r\n};\r\n\r\nclass InfoMap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        latitude: 37.785164,\r\n        longitude: -100,\r\n        zoom: 2.8,\r\n        bearing: 0,\r\n        pitch: 0,\r\n        width: 500,\r\n        height: 500,\r\n      },\r\n      popupInfo: null,\r\n      map: '',\r\n      loading: true,\r\n      sourceOptions: {},\r\n      center: [-0.2416815, 51.5285582 ],\r\n      staticDevices: \"\",\r\n      mobileDevices: [],\r\n      circleRadius: 30,\r\n      value: 0,\r\n      max: 6,\r\n      playback: false,\r\n\r\n    };\r\n    // this.mapLocation = React.createRef(),\r\n    // this.inputNew = React.createRef()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetch()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer)\r\n    this.timer = null\r\n  }\r\n\r\n  startPlayback = () => {\r\n    let value = this.state.value\r\n    value += 1\r\n    if(value < this.state.max && this.state.playback == false) {\r\n        this.timer = setInterval(()=> this.playback(), 100);\r\n        this.setState({playback: true})\r\n    }\r\n\r\n  }\r\n\r\n  stopTimer = () => {\r\n    clearInterval(this.timer)\r\n    this.setState({playback: false})\r\n  }\r\n\r\n\r\n\r\n  playback = () => {\r\n    let value = this.state.value\r\n    value += 1\r\n    if(value > this.state.max) {\r\n      this.stopTimer()\r\n    } else {\r\n      this.handleChange('', value)\r\n    }\r\n  }\r\n\r\n  fetch = (dispatch) => {\r\n    let query = `\r\n      query {\r\n        maps {\r\n          id\r\n          scale\r\n          coordinates\r\n          imageURL\r\n          navMesh\r\n          navPath\r\n          pois\r\n        }\r\n      }\r\n    `\r\n    this.request({query})\r\n    .then ((data) => {\r\n        let loading = this.state.loading\r\n        if(loading) {\r\n\r\n        }\r\n        this.props.fetchMaps(data.data.data.maps)\r\n      }\r\n    )\r\n  }\r\n\r\n  request = ({query, variables}) => {\r\n    let promise = axios({\r\n      method:   'post',\r\n      url:      `${graphqlUrlHTTPS}`,\r\n      headers:  {'Content-Type': 'application/json'},\r\n      data:     JSON.stringify({query, variables})\r\n    })\r\n    return promise;\r\n  }\r\n\r\n  updateSlider = () => {\r\n    let lengthSlider = this.props.locationData.length -1\r\n    this.setState({max: lengthSlider})\r\n  }\r\n\r\n  getDeviceLogs = (dispatch) => {\r\n\r\n    let promise = axios({\r\n      method:   'get',\r\n      url:      `${restUrlHTTPS}/Devices/logs`,\r\n      headers:  {'Content-Type': 'application/json'},\r\n    }).then (data => {\r\n\r\n        this.props.fetchDeviceLocations(data.data)\r\n      }\r\n    )\r\n    return promise;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this._resize);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if(this.props.locationData != prevProps.locationData) {\r\n      this.updateSlider()\r\n      if(this.state.map == '' && this.state.loading == true && this.props.locationData.length != 0) {\r\n\r\n        let map = ''\r\n        let locationData = this.props.locationData\r\n\r\n        this.props.maps.map(displayMap => {\r\n          if(displayMap.id == locationData[this.state.value]._source.map.id) {\r\n            map = displayMap\r\n            let newObj = JSON.parse(JSON.stringify(displayMap))\r\n            this.setState({map: newObj})\r\n          }\r\n        })\r\n        this.initializeMap(map)\r\n        this.setState({loading : false})\r\n      }\r\n      this.createBeaconMarkers()\r\n    }\r\n\r\n  }\r\n\r\n  getChildContext() {\r\n    return {map: this.state.map};\r\n  }\r\n  mapgl = () => {\r\n    return this.refs.map.getChildContext().map;\r\n  }\r\n\r\n  getChildContext = () => {\r\n    return { map: this.map };\r\n  };\r\n\r\n\r\n  createBeaconMarkers = (initialize) => {\r\n\r\n    let map = this.state.map\r\n    if(initialize != null) {\r\n      map = initialize;\r\n    }\r\n    if(map != \"\") {\r\n\r\n      let mobileDevices = []\r\n      let newObj = JSON.parse(JSON.stringify(this.props.locationData[this.state.value]._source))\r\n      if(this.props.info != \"\" && this.props.info != null)\r\n        newObj.id = this.props.info.name\r\n      mobileDevices.push(newObj)\r\n      this.setState({mobileDevices})\r\n    }\r\n\r\n  }\r\n  initializeMap = (map, jump) => {\r\n    this.setState({initial: map})\r\n    this.setState({map})\r\n\r\n    let sourceOptions = {\r\n      coordinates: (map != null ? map.coordinates : undefined),\r\n      type:         'image',\r\n      url:          (map != null ? map.imageURL : undefined)\r\n    }\r\n    this.setState({sourceOptions})\r\n\r\n    if(map != \"\") {\r\n      const bounds = new mapboxgl.LngLatBounds(this.__guard__(map != null ? map.coordinates : undefined, x => x[3]), this.__guard__(map != null ? map.coordinates : undefined, x1 => x1[1]));\r\n      let center = bounds.getCenter();\r\n      this.setState({center});\r\n      let filteredLogs = this.props.deviceLogs.filter(device => device.map.id == map.id);\r\n      let mobileDevices = []\r\n      filteredLogs.map(device => {\r\n        this.props.patients.forEach(patient => {\r\n          if(device.id == patient.beacon) {\r\n            //CHANGE TO PATIENT NAME\r\n            let newObj = JSON.parse(JSON.stringify(device))\r\n            newObj.id = patient.name\r\n            mobileDevices.push(newObj)\r\n          }\r\n        })\r\n      })\r\n      this.setState({mobileDevices})\r\n      let staticDevices = this.props.devices.filter(device => device.type == 'static');\r\n      staticDevices = staticDevices.filter(device => device.location != null)\r\n      staticDevices = staticDevices.filter(device => device.location.map.id == map.id)\r\n      this.setState({staticDevices})\r\n      this.setState({loading: false})\r\n      this.createBeaconMarkers(map)\r\n    }\r\n  }\r\n\r\n  onStyleLoad = (mapgl) => {\r\n    const { onLoad, map } = this.props;\r\n    if (map != null) { this.initializeMap(map); }\r\n  }\r\n\r\n  getCirclePaint = () => ({\r\n    'circle-radius': this.state.circleRadius,\r\n    'circle-color': '#FFFF00',\r\n    'circle-opacity': 0.4\r\n  });\r\n\r\n  _resize = () => {\r\n    this.setState({\r\n      viewport: {\r\n        ...this.state.viewport,\r\n        width: '100%',\r\n        height: '70vh'\r\n      }\r\n    });\r\n  };\r\n\r\n  _updateViewport = (viewport) => {\r\n    this.setState({viewport});\r\n  }\r\n\r\n  __guard__ = (value, transform) => {\r\n    return (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined;\r\n  }\r\n\r\n  renderHighlightDevices = () => {\r\n    let patients = this.props.patients;\r\n    let beacons = this.state.mobileDevices;\r\n    let devices = []\r\n    for(let i = 0 ; i < patients.length; i++) {\r\n\r\n      beacons.map((device) => {\r\n        if(patients[i].beacon == device.id && patients[i].highlight == true) {\r\n        devices.push(\r\n        <Feature\r\n          key={device.id}\r\n          coordinates={[device.lng, device.lat]}\r\n          properties={{\r\n            title:  device.id,\r\n            id:     device.id\r\n          }}\r\n        />)\r\n      }})\r\n    }\r\n\r\n    return devices;\r\n  }\r\n  renderDevices = (type) => {\r\n    let devices = []\r\n    let createDevices = []\r\n    if(type == 'static')\r\n      createDevices = this.state.staticDevices.map ((device) => {\r\n        devices.push(\r\n        <Feature\r\n          key={device.id}\r\n          coordinates={[device.location.lng, device.location.lat]}\r\n          properties={{\r\n            title:  device.id,\r\n            id:     device.id\r\n          }}\r\n        />)\r\n      })\r\n    else {\r\n      createDevices = this.state.mobileDevices.map((device) => {\r\n        devices.push(\r\n        <Feature\r\n          key={device.id}\r\n          coordinates={[device.lng, device.lat]}\r\n          properties={{\r\n            title:  device.id,\r\n            id:     device.id\r\n          }}\r\n        />)\r\n      })\r\n    }\r\n    return devices;\r\n  }\r\n\r\n  formatUnix = () => {\r\n    let unix = this.props.locationData[this.state.value]._source.time /1000\r\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    let date = new Date(unix*1000);\r\n    let year = date.getFullYear();\r\n    let month = months_arr[date.getMonth()];\r\n    let day = date.getDate();\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n    let seconds = \"0\" + date.getSeconds();\r\n    let convdataTime = day+'-'+month+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    return convdataTime\r\n  }\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ value });\r\n    if(this.props.locationData[value]._source.map.id != this.state.map.id) {\r\n      let map = \"\"\r\n      this.props.maps.map(displayMap => {\r\n        if(displayMap.id == this.props.locationData[this.state.value]._source.map.id) {\r\n          map = displayMap\r\n          let newObj = JSON.parse(JSON.stringify(displayMap))\r\n          this.setState({map: newObj})\r\n        }\r\n      })\r\n      this.initializeMap(map)\r\n    }\r\n    this.createBeaconMarkers()\r\n  }\r\n  renderPopup = () => {\r\n    return this.state.popupInfo && (\r\n      <Popup tipSize={5}\r\n        anchor=\"bottom-right\"\r\n        longitude={this.state.popupInfo.state.longitude}\r\n        latitude={this.state.popupInfo.state.latitude}\r\n        onClose={() => this.setState({popupInfo: null})}\r\n        closeOnClick={true}>\r\n        <h4>{this.state.popupInfo.state.fullName}</h4>\r\n        <p>{this.state.popupInfo.incidentNumber} {this.state.popupInfo.disaster} incident(s)</p>\r\n        <div class=\"text-center\">\r\n          <img src={this.state.popupInfo.icon.imgUrl} style={{height: \"50px\"}} />\r\n        </div>\r\n      </Popup>\r\n      )\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {viewport} = this.state;\r\n    let sourceOptions = this.state.sourceOptions\r\n    let imageURL = \"mapbox://styles/mapbox/dark-v9\";\r\n    let center = this.state.center\r\n    if(this.props.map != \"\") {\r\n    }\r\n    const { children, onLoad, map, height, width } = this.props;\r\n    let locationOrigin = window.location.origin\r\n    let style = {\r\n        version:  8,\r\n        name:     'custom',\r\n        sources:  {},\r\n        sprite:   `${locationOrigin}/mapbox-styles/maki`,\r\n        glyphs:   `${locationOrigin}/mapbox-styles/font/{fontstack}/{range}.pbf`,\r\n        layers:   []\r\n    }\r\n\r\n    return (\r\n      <div>\r\n      <ReactMap\r\n        style={style}\r\n        center={center}\r\n        movingMethod={'jumpTo'}\r\n        ref={this.mapLocation}\r\n        containerStyle={{\r\n          height: '70vh',\r\n          width: '100%'}}\r\n        onStyleLoad={this.onStyleLoad}\r\n      >\r\n\r\n      <Layer type=\"symbol\"\r\n      id=\"staticDevices\"\r\n      layout={{\r\n        'icon-image':             'triangle-15',\r\n        'icon-allow-overlap':     true,\r\n        'icon-ignore-placement':  true,\r\n        'text-allow-overlap':     true,\r\n        'text-ignore-placement':  true,\r\n        'text-field':             '{title}',\r\n        'text-font':              ['Open Sans Semibold'],\r\n        'text-offset':            [0, 0.8],\r\n        'text-anchor':            'top',\r\n      }}>\r\n\r\n      {\r\n        //this.state.staticDevices != \"\" ? this.renderDevices('static') : null\r\n      }\r\n      </Layer>\r\n\r\n      <Layer type=\"circle\"  paint={this.getCirclePaint()}>\r\n      {\r\n        this.renderHighlightDevices()\r\n      }\r\n      </Layer>\r\n      <Layer type=\"symbol\"\r\n      id=\"patientDevices\"\r\n      layout={{\r\n        'icon-image':             'marker-15',\r\n        'icon-allow-overlap':     true,\r\n        'icon-ignore-placement':  true,\r\n        'text-allow-overlap':     true,\r\n        'text-ignore-placement':  true,\r\n        'text-field':             '{title}',\r\n        'text-font':              ['Open Sans Semibold'],\r\n        'text-offset':            [0, 0.8],\r\n        'text-anchor':            'top',\r\n      }}>\r\n\r\n      {\r\n        this.renderDevices('mobile')\r\n      }\r\n      </Layer>\r\n      {this.state.map != \"\" ?\r\n      <Source id=\"image_source\" tileJsonSource={sourceOptions} />\r\n      : null}\r\n      <Layer id=\"image_layer\" before=\"staticDevices\" type=\"raster\" sourceId=\"image_source\"/>\r\n    </ReactMap>\r\n    {this.state.map != \"\" ? <div>\r\n    {this.state.playback == false ? <Button onClick={this.startPlayback}> Playback </Button> :\r\n    <Button onClick={this.stopTimer}> Stop </Button>}\r\n    <Typography variant=\"subtitle1\">{this.props.locationData.length != 0 ? this.formatUnix() : this.state.value}</Typography>\r\n    <Slider\r\n        value={this.state.value}\r\n        min={0}\r\n        max={this.state.max}\r\n        step={1}\r\n        onChange={this.handleChange}\r\n        />\r\n      <Typography variant=\"h6\" gutterBottom style={{marginTop: '1em'}}>{this.props.locationData.length != 0 ? `Location: ${this.props.locationData[this.state.value]._source.map.id}` : null} </Typography>\r\n      </div> : null}\r\n    </div>\r\n  )\r\n  }\r\n\r\n}\r\nconst ConnectedInfoMap = connect(mapStateToProps, mapDispatchToProps)(InfoMap);\r\n\r\nexport default ConnectedInfoMap;\r\n"]},"metadata":{},"sourceType":"module"}