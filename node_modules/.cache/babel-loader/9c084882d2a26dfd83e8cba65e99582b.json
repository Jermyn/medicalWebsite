{"ast":null,"code":"import _objectSpread from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/ECGChart.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport 'chartjs-plugin-streaming';\nimport { Line } from 'react-chartjs-2';\n\nvar styles = function styles(theme) {\n  return {\n    \"chart-container\": {\n      height: 400\n    }\n  };\n};\n\nvar HealthChart =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HealthChart, _React$Component);\n\n  function HealthChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HealthChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HealthChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      lineChartData: {\n        datasets: [{\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderColor: _this.props.theme.palette.primary.main,\n          pointBackgroundColor: _this.props.theme.palette.secondary.main,\n          pointBorderColor: _this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          pointRadius: 0,\n          lineTension: 0,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        events: [],\n        responsive: true,\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        elements: {},\n        tooltips: {\n          enabled: true\n        },\n        plugins: {\n          streaming: {\n            frameRate: 30\n          }\n        },\n        scales: {\n          xAxes: [{\n            type: 'realtime',\n            realtime: {\n              duration: 30000,\n              delay: 1000,\n              pause: false\n            },\n            ticks: {\n              autoSkip: false,\n              maxTicksLimit: 10\n            }\n          }]\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(HealthChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.vitals !== prevProps.vitals && this.props.vitals != null) {\n        var vitals = this.props.vitals;\n        var oldBtcDataSet = this.state.lineChartData.datasets[0];\n\n        var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n        vitals.map(function (vital) {\n          var value = vital.ecgHrPoint;\n          var epoch = vital.timestamp;\n          var date = new Date(epoch);\n          var vitalSign = {\n            x: epoch,\n            y: value\n          };\n          newBtcDataSet.data.push(vitalSign);\n        });\n\n        var newChartData = _objectSpread({}, this.state.lineChartData, {\n          datasets: [newBtcDataSet]\n        });\n\n        this.setState({\n          lineChartData: newChartData\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      return React.createElement(\"div\", {\n        className: classes[\"chart-container\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Line, {\n        data: this.state.lineChartData,\n        options: this.state.lineChartOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return HealthChart;\n}(React.Component);\n\nexport default withStyles(styles, {\n  withTheme: true\n})(HealthChart);","map":{"version":3,"sources":["/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/ECGChart.js"],"names":["React","render","withStyles","Line","styles","theme","height","HealthChart","state","lineChartData","datasets","label","backgroundColor","borderColor","props","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","pointRadius","lineTension","data","lineChartOptions","events","responsive","maintainAspectRatio","legend","display","elements","tooltips","enabled","plugins","streaming","frameRate","scales","xAxes","type","realtime","duration","delay","pause","ticks","autoSkip","maxTicksLimit","prevProps","prevState","vitals","oldBtcDataSet","newBtcDataSet","map","vital","value","ecgHrPoint","epoch","timestamp","date","Date","vitalSign","x","y","push","newChartData","setState","classes","Component","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport 'chartjs-plugin-streaming';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst styles = theme => ({\r\n  \"chart-container\": {\r\n    height: 400\r\n  }\r\n});\r\n\r\nclass HealthChart extends React.Component {\r\n  state = {\r\n    lineChartData: {\r\n\r\n      datasets: [\r\n        {\r\n          label: \"BTC-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"2\",\r\n          pointRadius: 0,\r\n          lineTension: 0,\r\n          data: []\r\n        }\r\n      ]\r\n    },\r\n    lineChartOptions: {\r\n      events: [],\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n\r\n      legend: {\r\n        display: false,\r\n      },\r\n\r\n      elements: {\r\n\r\n      },\r\n      tooltips: {\r\n        enabled: true\r\n      },\r\n      plugins: {\r\n        streaming: {\r\n          frameRate: 30\r\n        }\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            type: 'realtime',\r\n            realtime: {\r\n              duration: 30000,\r\n              delay: 1000,\r\n              pause: false,\r\n\r\n            },\r\n            ticks: {\r\n              autoSkip: false,\r\n              maxTicksLimit: 10\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(this.props.vitals !== prevProps.vitals && this.props.vitals != null ) {\r\n      let vitals = this.props.vitals\r\n\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      vitals.map(vital => {\r\n        let value = vital.ecgHrPoint\r\n        let epoch = vital.timestamp;\r\n        let date = new Date(epoch)\r\n        let vitalSign = {x: epoch, y: value}\r\n        newBtcDataSet.data.push(vitalSign);\r\n      })\r\n\r\n\r\n\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n      };\r\n\r\n      this.setState({ lineChartData: newChartData });\r\n\r\n    }\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className={classes[\"chart-container\"]}>\r\n      <Line\r\n        data={this.state.lineChartData}\r\n        options={this.state.lineChartOptions}\r\n      />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(HealthChart);\r\n"]},"metadata":{},"sourceType":"module"}