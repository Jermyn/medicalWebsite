{"ast":null,"code":"import _objectSpread from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/ContactTraceMap.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchMaps as _fetchMaps, confirmType as _confirmType, fetchContactTrace as _fetchContactTrace } from \"./actions/index\";\nimport MapGL, { Marker, Popup, NavigationControl } from 'react-map-gl';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { Source, Layer, Feature } from \"react-mapbox-gl\";\nimport mapboxgl from 'mapbox-gl'; // import StatePin from './StatePin'\n\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport Slider from '@material-ui/lab/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nvar e = React.createElement;\nvar TOKEN = 'pk.eyJ1IjoiZnlwZW5nIiwiYSI6ImNqcmFlazM4YjAxejkzeW1wbWg2Zmp2aWsifQ.obOnEjbqcpEWu9HIh6zPlw'; // Set your mapbox token here\n\nvar graphqlUrlHTTPS = 'http://137.132.165.139:3000/graphql';\n\nvar styles = function styles(theme) {\n  var _demo;\n\n  return {\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    },\n    demo: (_demo = {\n      padding: '16px 24px 24px'\n    }, _defineProperty(_demo, theme.breakpoints.up(\"sm\"), {\n      width: '560px'\n    }), _defineProperty(_demo, theme.breakpoints.up(\"md\"), {\n      width: '700px'\n    }), _defineProperty(_demo, theme.breakpoints.up(\"lg\"), {\n      width: '800px'\n    }), _demo)\n  };\n};\n\nvar ReactMap = ReactMapboxGl({\n  accessToken: \"\".concat(TOKEN),\n  maxZoom: 10.5,\n  minZoom: 0\n});\nvar navStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    maps: state.maps,\n    map: state.map,\n    devices: state.devices,\n    deviceLogs: state.deviceLogs,\n    patients: state.patients,\n    contactTrace: state.contactTrace,\n    traceDetails: state.traceDetails,\n    filterTrace: state.filterTrace\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    confirmType: function confirmType(type) {\n      return dispatch(_confirmType(type));\n    },\n    fetchMaps: function fetchMaps(maps) {\n      return dispatch(_fetchMaps(maps));\n    },\n    fetchContactTrace: function fetchContactTrace(traceDetails) {\n      return dispatch(_fetchContactTrace(traceDetails));\n    }\n  };\n};\n\nvar ContactTraceMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactTraceMap, _Component);\n\n  function ContactTraceMap(props) {\n    var _this;\n\n    _classCallCheck(this, ContactTraceMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContactTraceMap).call(this, props));\n\n    _this.fetch = function (dispatch) {\n      var query = \"\\n      query {\\n        maps {\\n          id\\n          scale\\n          coordinates\\n          imageURL\\n          navMesh\\n          navPath\\n          pois\\n        }\\n      }\\n    \";\n\n      _this.request({\n        query: query\n      }).then(function (data) {\n        return _this.props.fetchMaps(data.data.data.maps);\n      });\n    };\n\n    _this.request = function (_ref) {\n      var query = _ref.query,\n          variables = _ref.variables;\n      var promise = axios({\n        method: 'post',\n        url: \"\".concat(graphqlUrlHTTPS),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: JSON.stringify({\n          query: query,\n          variables: variables\n        })\n      });\n      return promise;\n    };\n\n    _this.startPlayback = function () {\n      var value = _this.state.value;\n      value += 1;\n\n      if (value < _this.state.max && _this.state.playback == false) {\n        _this.timer = setInterval(function () {\n          return _this.playback();\n        }, 100);\n\n        _this.setState({\n          playback: true\n        });\n      }\n    };\n\n    _this.stopTimer = function () {\n      clearInterval(_this.timer);\n\n      _this.setState({\n        playback: false\n      });\n    };\n\n    _this.playback = function () {\n      var value = _this.state.value;\n      value += 1;\n\n      if (value > _this.state.max) {\n        _this.stopTimer();\n      } else {\n        _this.setState({\n          value: value\n        });\n      }\n    };\n\n    _this.createFake = function () {\n      var beacon = {\n        id: 'b1',\n        lat: '0.12689939700739615',\n        lng: '0.2535276535309947',\n        map: {\n          id: 'MeetingRm'\n        }\n      };\n      var beacon2 = {\n        id: 'b2',\n        lat: '0.14689939700739615',\n        lng: '0.2535276535309947',\n        map: {\n          id: 'MeetingRm'\n        }\n      };\n      var beacon3 = {\n        id: 'b3',\n        lat: '0.192689939700739615',\n        lng: '0.2535276535309947',\n        map: {\n          id: 'MeetingRm'\n        }\n      };\n      var beacons = [];\n      beacons.push(beacon);\n      beacons.push(beacon2);\n      beacons.push(beacon3);\n      return beacons;\n    };\n\n    _this.initializeMap = function (data, jump) {\n      var maps = _this.props.maps;\n      var map = \"\";\n      maps.map(function (location) {\n        if (location.id == \"simulation_ward\") {\n          map = JSON.parse(JSON.stringify(location));\n          map.coordinates = [[0, 0.114], [0.6217262964, 0.114], [0.6217262964, 0], [0, 0]]; //    (0,0), (0.6217262964, 0), (0, 0.1099696441), (0.6217262964, 0.1099696441)\n        }\n      });\n\n      if (map != \"\") {\n        _this.setState({\n          map: map\n        });\n      }\n\n      var sourceOptions = {\n        coordinates: map != \"\" ? map.coordinates : undefined,\n        type: 'image',\n        url: map != \"\" ? map.imageURL : undefined\n      };\n\n      _this.setState({\n        sourceOptions: sourceOptions\n      });\n\n      if (_this.props.contactTrace != null) {\n        _this.updateSlider();\n\n        if (map != \"\") {\n          var bounds = new mapboxgl.LngLatBounds(_this.__guard__(map != \"\" ? map.coordinates : undefined, function (x) {\n            return x[3];\n          }), _this.__guard__(map != \"\" ? map.coordinates : undefined, function (x1) {\n            return x1[1];\n          }));\n          var center = bounds.getCenter();\n\n          _this.setState({\n            center: center\n          });\n        }\n      }\n    };\n\n    _this.updateSlider = function () {\n      var lengthSlider = _this.props.contactTrace.length - 1;\n\n      _this.setState({\n        max: lengthSlider\n      });\n    };\n\n    _this.onStyleLoad = function (mapgl) {\n      var _this$props = _this.props,\n          onLoad = _this$props.onLoad,\n          map = _this$props.map;\n\n      if (map != null) {\n        _this.initializeMap(map);\n      }\n    };\n\n    _this.getCirclePaint = function () {\n      return {\n        'circle-radius': _this.state.circleRadius,\n        'circle-color': '#FFFF00',\n        'circle-opacity': 0.4\n      };\n    };\n\n    _this.getInfectedCircle = function () {\n      return {\n        'circle-radius': _this.state.circleRadius,\n        'circle-stroke-width': 1.5,\n        'circle-stroke-color': '#FF0000',\n        'circle-opacity': 0\n      };\n    };\n\n    _this._resize = function () {\n      _this.setState({\n        viewport: _objectSpread({}, _this.state.viewport, {\n          width: _this.props.width || window.innerWidth,\n          height: '70vh'\n        })\n      });\n    };\n\n    _this._updateViewport = function (viewport) {\n      _this.setState({\n        viewport: viewport\n      });\n    };\n\n    _this.__guard__ = function (value, transform) {\n      return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;\n    };\n\n    _this.renderInfectedCircle = function () {\n      var contacts = _this.props.contactTrace[_this.state.value];\n      var infected = [];\n      var beacon = _this.props.traceDetails.name;\n      infected.push(React.createElement(Feature, {\n        key: _this.props.traceDetails.name,\n        coordinates: [contacts[beacon].latitude, contacts[beacon].longitude],\n        properties: {\n          title: _this.props.traceDetails.name,\n          id: _this.props.traceDetails.name\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }));\n      return infected;\n    };\n\n    _this.renderHighlightDevices = function () {\n      var contactTrace = _this.props.contactTrace[_this.state.value];\n      var devices = [];\n      var primaryContacts = _this.props.filterTrace;\n      var timestamp = contactTrace.timestamp;\n\n      for (var _i = 0, _Object$keys = Object.keys(primaryContacts); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var index = key;\n\n        if (timestamp >= primaryContacts[key] && contactTrace[index] != null) {\n          devices.push(React.createElement(Feature, {\n            key: index,\n            coordinates: [contactTrace[index].latitude, contactTrace[index].longitude],\n            properties: {\n              title: index,\n              id: index\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }));\n        }\n      }\n\n      return devices;\n    };\n\n    _this.renderDevices = function (type) {\n      var devices = [];\n      var createDevices = [];\n\n      if (type == 'static') {\n        createDevices = _this.state.staticDevices.map(function (device) {\n          devices.push(React.createElement(Feature, {\n            key: device.id,\n            coordinates: [device.location.lng, device.location.lat],\n            properties: {\n              title: device.id,\n              id: device.id\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323\n            },\n            __self: this\n          }));\n        });\n      } else {\n        var contactTrace = _this.props.contactTrace[_this.state.value];\n        var entries = Object.values(contactTrace);\n        createDevices = entries.map(function (contact) {\n          if (typeof contact === 'object' && contact !== null && contact.beacon != null) {\n            devices.push(React.createElement(Feature, {\n              key: contact.beacon,\n              coordinates: [contact.latitude, contact.longitude],\n              properties: {\n                title: contact.beacon,\n                id: contact.beacon\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 341\n              },\n              __self: this\n            }));\n          }\n        });\n      }\n\n      return devices;\n    };\n\n    _this.renderPopup = function () {\n      return _this.state.popupInfo && React.createElement(Popup, {\n        tipSize: 5,\n        anchor: \"bottom-right\",\n        longitude: _this.state.popupInfo.state.longitude,\n        latitude: _this.state.popupInfo.state.latitude,\n        onClose: function onClose() {\n          return _this.setState({\n            popupInfo: null\n          });\n        },\n        closeOnClick: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, _this.state.popupInfo.state.fullName), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, _this.state.popupInfo.incidentNumber, \" \", _this.state.popupInfo.disaster, \" incident(s)\"), React.createElement(\"div\", {\n        class: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _this.state.popupInfo.icon.imgUrl,\n        style: {\n          height: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      })));\n    };\n\n    _this.formatUnix = function () {\n      var unix = _this.props.contactTrace[_this.state.value].key;\n      var months_arr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      var date = new Date(unix * 1000);\n      var year = date.getFullYear();\n      var month = months_arr[date.getMonth()];\n      var day = date.getDate();\n      var hours = date.getHours();\n      var minutes = \"0\" + date.getMinutes();\n      var seconds = \"0\" + date.getSeconds();\n      var convdataTime = day + '-' + month + '-' + year + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      return convdataTime;\n    };\n\n    _this.handleChange = function (event, value) {\n      _this.setState({\n        value: value\n      });\n    };\n\n    _this.state = {\n      viewport: {\n        latitude: 37.785164,\n        longitude: -100,\n        zoom: 2.8,\n        bearing: 0,\n        pitch: 0,\n        width: 500,\n        height: 500\n      },\n      popupInfo: null,\n      map: '',\n      sourceOptions: {},\n      center: [0, 0],\n      staticDevices: \"\",\n      mobileDevices: \"\",\n      circleRadius: 20,\n      value: 0,\n      max: 6,\n      playback: false\n    };\n    return _this;\n  }\n\n  _createClass(ContactTraceMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('resize', this._resize);\n      this.fetch();\n\n      this._resize();\n\n      if (this.props.map != null) {\n        this.initializeMap(this.props.map);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._resize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.contactTrace !== prevProps.contactTrace) {\n        this.initializeMap(this.props.contactTrace);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var viewport = this.state.viewport;\n      var classes = this.props.classes;\n      var sourceOptions = this.state.sourceOptions;\n      var imageURL = \"mapbox://styles/mapbox/dark-v9\";\n      var center = this.state.center;\n\n      if (this.props.map != \"\") {}\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          onLoad = _this$props2.onLoad,\n          map = _this$props2.map,\n          height = _this$props2.height,\n          width = _this$props2.width;\n      var locationOrigin = window.location.origin;\n      var style = {\n        version: 8,\n        name: 'custom',\n        sources: {},\n        sprite: \"\".concat(locationOrigin, \"/mapbox-styles/maki\"),\n        glyphs: \"\".concat(locationOrigin, \"/mapbox-styles/font/{fontstack}/{range}.pbf\"),\n        layers: [] // return (\n        //   <MapGL\n        //     {...viewport}\n        //     mapStyle={imageURL}\n        //     onViewportChange={this._updateViewport}\n        //     mapboxApiAccessToken={TOKEN} >\n        //     {/*markers*/}\n        //     {/*this.renderPopup()*/}\n        //\n        //   </MapGL>\n        // );\n\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(ReactMap, {\n        style: style,\n        center: center,\n        movingMethod: 'jumpTo',\n        ref: this.mapLocation,\n        containerStyle: {\n          height: '70vh',\n          width: '100%'\n        },\n        onStyleLoad: this.onStyleLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"staticDevices\",\n        layout: {\n          'icon-image': 'triangle-15',\n          'icon-allow-overlap': true,\n          'icon-ignore-placement': true,\n          'text-allow-overlap': true,\n          'text-ignore-placement': true,\n          'text-field': '{title}',\n          'text-font': ['Open Sans Semibold'],\n          'text-offset': [0, 0.8],\n          'text-anchor': 'top'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, this.state.staticDevices != \"\" ? this.renderDevices('static') : null), React.createElement(Layer, {\n        type: \"circle\",\n        paint: this.getInfectedCircle(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461\n        },\n        __self: this\n      }, this.props.filterTrace != null ? this.renderInfectedCircle() : null), React.createElement(Layer, {\n        type: \"circle\",\n        paint: this.getCirclePaint(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, //this.props.contactTrace != null ? this.renderDevices('mobile') : null\n      this.props.filterTrace != null ? this.renderHighlightDevices() : null), React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"patientDevices\",\n        layout: {\n          'icon-image': 'marker-15',\n          'icon-allow-overlap': true,\n          'icon-ignore-placement': true,\n          'text-allow-overlap': true,\n          'text-ignore-placement': true,\n          'text-field': '{title}',\n          'text-font': ['Open Sans Semibold'],\n          'text-offset': [0.6, 0.7],\n          'text-anchor': 'bottom-left',\n          'icon-size': 0.6\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, this.props.contactTrace != null ? this.renderDevices('mobile') : null), this.state.map != \"\" ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }, React.createElement(Source, {\n        id: \"image_source\",\n        tileJsonSource: sourceOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }), React.createElement(Layer, {\n        id: \"image_layer\",\n        before: \"staticDevices\",\n        type: \"raster\",\n        sourceId: \"image_source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      })) : null), React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        className: classes.demo,\n        justify: \"center\",\n        spacing: 0,\n        alignItems: \"center\",\n        style: {\n          overflowX: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"subtitle1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, this.props.contactTrace != null ? this.formatUnix() : this.state.value), React.createElement(Slider, {\n        value: this.state.value,\n        min: 0,\n        max: this.state.max,\n        step: 1,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }), this.state.playback == false ? React.createElement(Button, {\n        onClick: this.startPlayback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, \" Playback \") : React.createElement(Button, {\n        onClick: this.stopTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, \" Stop \")))));\n    }\n  }]);\n\n  return ContactTraceMap;\n}(Component);\n\nvar ConnectedContactTraceMap = connect(mapStateToProps, mapDispatchToProps)(ContactTraceMap);\nexport default withStyles(styles)(ConnectedContactTraceMap);","map":{"version":3,"sources":["/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/ContactTraceMap.js"],"names":["React","Component","connect","fetchMaps","confirmType","fetchContactTrace","MapGL","Marker","Popup","NavigationControl","ReactMapboxGl","Source","Layer","Feature","mapboxgl","withStyles","classNames","Slider","Typography","Grid","Button","axios","e","createElement","TOKEN","graphqlUrlHTTPS","styles","theme","container","display","flexWrap","root","flexGrow","grow","demo","padding","breakpoints","up","width","ReactMap","accessToken","maxZoom","minZoom","navStyle","position","top","left","mapStateToProps","state","maps","map","devices","deviceLogs","patients","contactTrace","traceDetails","filterTrace","mapDispatchToProps","dispatch","type","ContactTraceMap","props","fetch","query","request","then","data","variables","promise","method","url","headers","JSON","stringify","startPlayback","value","max","playback","timer","setInterval","setState","stopTimer","clearInterval","createFake","beacon","id","lat","lng","beacon2","beacon3","beacons","push","initializeMap","jump","location","parse","coordinates","sourceOptions","undefined","imageURL","updateSlider","bounds","LngLatBounds","__guard__","x","x1","center","getCenter","lengthSlider","length","onStyleLoad","mapgl","onLoad","getCirclePaint","circleRadius","getInfectedCircle","_resize","viewport","window","innerWidth","height","_updateViewport","transform","renderInfectedCircle","contacts","infected","name","latitude","longitude","title","renderHighlightDevices","primaryContacts","timestamp","Object","keys","key","index","renderDevices","createDevices","staticDevices","device","entries","values","contact","renderPopup","popupInfo","fullName","incidentNumber","disaster","icon","imgUrl","formatUnix","unix","months_arr","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","convdataTime","substr","handleChange","event","zoom","bearing","pitch","mobileDevices","addEventListener","removeEventListener","prevProps","classes","children","locationOrigin","origin","style","version","sources","sprite","glyphs","layers","mapLocation","overflowX","ConnectedContactTraceMap"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchMaps, confirmType, fetchContactTrace } from \"./actions/index\";\r\nimport MapGL, {Marker, Popup, NavigationControl} from 'react-map-gl';\r\nimport ReactMapboxGl from 'react-mapbox-gl';\r\nimport { Source, Layer, Feature } from \"react-mapbox-gl\";\r\nimport mapboxgl from 'mapbox-gl';\r\n// import StatePin from './StatePin'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios'\r\nconst e             = React.createElement;\r\n\r\n\r\nconst TOKEN = 'pk.eyJ1IjoiZnlwZW5nIiwiYSI6ImNqcmFlazM4YjAxejkzeW1wbWg2Zmp2aWsifQ.obOnEjbqcpEWu9HIh6zPlw'; // Set your mapbox token here\r\nconst graphqlUrlHTTPS = 'http://137.132.165.139:3000/graphql';\r\n\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n  demo: {\r\n    padding: '16px 24px 24px',\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: '560px'\r\n    },\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: '700px'\r\n    },\r\n    [theme.breakpoints.up(\"lg\")]: {\r\n      width: '800px'\r\n    }\r\n  }\r\n});\r\n\r\nconst ReactMap = ReactMapboxGl({\r\n  accessToken: `${TOKEN}`,\r\n  maxZoom:    10.5,\r\n  minZoom:    0,\r\n})\r\nconst navStyle = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  padding: '10px'\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    maps: state.maps,\r\n    map: state.map,\r\n    devices: state.devices,\r\n    deviceLogs: state.deviceLogs,\r\n    patients: state.patients,\r\n    contactTrace: state.contactTrace,\r\n    traceDetails: state.traceDetails,\r\n    filterTrace: state.filterTrace,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    confirmType: type => dispatch(confirmType(type)),\r\n    fetchMaps: maps => dispatch(fetchMaps(maps)),\r\n    fetchContactTrace: traceDetails => dispatch(fetchContactTrace(traceDetails)),\r\n  };\r\n};\r\n\r\nclass ContactTraceMap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        latitude: 37.785164,\r\n        longitude: -100,\r\n        zoom: 2.8,\r\n        bearing: 0,\r\n        pitch: 0,\r\n        width: 500,\r\n        height: 500,\r\n      },\r\n      popupInfo: null,\r\n      map: '',\r\n      sourceOptions: {},\r\n      center: [0, 0],\r\n      staticDevices: \"\",\r\n      mobileDevices: \"\",\r\n      circleRadius: 20,\r\n      value: 0,\r\n      max: 6,\r\n      playback: false,\r\n\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this._resize);\r\n    this.fetch()\r\n    this._resize();\r\n    if(this.props.map != null) {\r\n      this.initializeMap(this.props.map);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this._resize);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.contactTrace !== prevProps.contactTrace) {\r\n      this.initializeMap(this.props.contactTrace)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  fetch = (dispatch) => {\r\n    let query = `\r\n      query {\r\n        maps {\r\n          id\r\n          scale\r\n          coordinates\r\n          imageURL\r\n          navMesh\r\n          navPath\r\n          pois\r\n        }\r\n      }\r\n    `\r\n    this.request({query})\r\n    .then ((data) =>\r\n      this.props.fetchMaps(data.data.data.maps),\r\n    )\r\n  }\r\n\r\n  request = ({query, variables}) => {\r\n    let promise = axios({\r\n      method:   'post',\r\n      url:      `${graphqlUrlHTTPS}`,\r\n      headers:  {'Content-Type': 'application/json'},\r\n      data:     JSON.stringify({query, variables})\r\n    })\r\n    return promise;\r\n  }\r\n\r\n  startPlayback = () => {\r\n    let value = this.state.value\r\n    value += 1\r\n    if(value < this.state.max && this.state.playback == false) {\r\n        this.timer = setInterval(()=> this.playback(), 100);\r\n        this.setState({playback: true})\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  stopTimer = () => {\r\n    clearInterval(this.timer)\r\n    this.setState({playback: false})\r\n  }\r\n\r\n  playback = () => {\r\n    let value = this.state.value\r\n    value += 1\r\n    if(value > this.state.max) {\r\n      this.stopTimer()\r\n    } else {\r\n      this.setState({value: value})\r\n    }\r\n  }\r\n  createFake = () => {\r\n    let beacon = {id: 'b1', lat: '0.12689939700739615', lng: '0.2535276535309947', map: {id: 'MeetingRm'}}\r\n    let beacon2 = {id: 'b2', lat: '0.14689939700739615', lng: '0.2535276535309947', map: {id: 'MeetingRm'}}\r\n    let beacon3 = {id: 'b3', lat: '0.192689939700739615', lng: '0.2535276535309947', map: {id: 'MeetingRm'}}\r\n\r\n    let beacons = [];\r\n    beacons.push(beacon)\r\n    beacons.push(beacon2)\r\n    beacons.push(beacon3)\r\n    return beacons\r\n  }\r\n  initializeMap = (data, jump) => {\r\n    let maps = this.props.maps\r\n    let map = \"\"\r\n    maps.map(location => {\r\n      if(location.id == \"simulation_ward\") {\r\n        map = JSON.parse(JSON.stringify(location))\r\n        map.coordinates = [[0, 0.114], [0.6217262964, 0.114], [0.6217262964, 0],[0,0]]\r\n    //    (0,0), (0.6217262964, 0), (0, 0.1099696441), (0.6217262964, 0.1099696441)\r\n      }\r\n    })\r\n\r\n    if(map != \"\") {\r\n      this.setState({map})\r\n    }\r\n\r\n    let sourceOptions = {\r\n      coordinates: (map != \"\" ? map.coordinates : undefined),\r\n      type:         'image',\r\n      url:          (map != \"\" ? map.imageURL : undefined)\r\n    }\r\n    this.setState({sourceOptions})\r\n\r\n    if(this.props.contactTrace != null) {\r\n      this.updateSlider()\r\n      if(map != \"\") {\r\n        const bounds = new mapboxgl.LngLatBounds(this.__guard__(map != \"\" ? map.coordinates : undefined, x => x[3]), this.__guard__(map != \"\" ? map.coordinates : undefined, x1 => x1[1]));\r\n        let center = bounds.getCenter();\r\n        this.setState({center});\r\n      }\r\n    }\r\n  }\r\n\r\n  updateSlider = () => {\r\n    let lengthSlider = this.props.contactTrace.length -1\r\n    this.setState({max: lengthSlider})\r\n  }\r\n  onStyleLoad = (mapgl) => {\r\n\r\n    const { onLoad, map } = this.props;\r\n    if (map != null) { this.initializeMap(map); }\r\n  }\r\n\r\n  getCirclePaint = () => ({\r\n    'circle-radius': this.state.circleRadius,\r\n    'circle-color': '#FFFF00',\r\n    'circle-opacity': 0.4\r\n  });\r\n\r\n  getInfectedCircle = () => ({\r\n    'circle-radius': this.state.circleRadius,\r\n    'circle-stroke-width': 1.5,\r\n    'circle-stroke-color': '#FF0000',\r\n    'circle-opacity': 0\r\n  })\r\n\r\n  _resize = () => {\r\n    this.setState({\r\n      viewport: {\r\n        ...this.state.viewport,\r\n        width: this.props.width || window.innerWidth,\r\n        height: '70vh'\r\n      }\r\n    });\r\n  };\r\n\r\n  _updateViewport = (viewport) => {\r\n    this.setState({viewport});\r\n  }\r\n\r\n  __guard__ = (value, transform) => {\r\n    return (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined;\r\n  }\r\n\r\n\r\n  renderInfectedCircle = () => {\r\n\r\n\r\n    let contacts = this.props.contactTrace[this.state.value];\r\n\r\n    let infected = []\r\n    let beacon = this.props.traceDetails.name\r\n    infected.push(\r\n    <Feature\r\n      key={this.props.traceDetails.name}\r\n      coordinates={[contacts[beacon].latitude, contacts[beacon].longitude]}\r\n      properties={{\r\n        title:  this.props.traceDetails.name,\r\n        id:     this.props.traceDetails.name\r\n      }}\r\n    />)\r\n\r\n    return infected;\r\n  }\r\n\r\n  renderHighlightDevices = () => {\r\n\r\n    let contactTrace = this.props.contactTrace[this.state.value]\r\n    let devices = []\r\n    let primaryContacts = this.props.filterTrace\r\n    let timestamp = contactTrace.timestamp\r\n    for (const key of Object.keys(primaryContacts)) {\r\n      let index = key\r\n      if(timestamp >= primaryContacts[key]  && contactTrace[index] != null) {\r\n        devices.push(\r\n           <Feature\r\n             key={index}\r\n             coordinates={[contactTrace[index].latitude, contactTrace[index].longitude]}\r\n             properties={{\r\n               title:  index,\r\n               id:     index\r\n             }}\r\n           />)\r\n      }\r\n    }\r\n    return devices;\r\n  }\r\n  renderDevices = (type) => {\r\n    let devices = []\r\n    let createDevices = []\r\n    if(type == 'static') {\r\n      createDevices = this.state.staticDevices.map ((device) => {\r\n        devices.push(\r\n        <Feature\r\n          key={device.id}\r\n          coordinates={[device.location.lng, device.location.lat]}\r\n          properties={{\r\n            title:  device.id,\r\n            id:     device.id\r\n          }}\r\n        />)\r\n      })\r\n    } else {\r\n\r\n      let contactTrace = this.props.contactTrace[this.state.value]\r\n\r\n      const entries = Object.values(contactTrace)\r\n\r\n        createDevices = entries.map((contact) => {\r\n          if(typeof contact === 'object' && contact !== null && contact.beacon != null) {\r\n            devices.push(\r\n            <Feature\r\n              key={contact.beacon}\r\n              coordinates={[contact.latitude, contact.longitude]}\r\n              properties={{\r\n                title:  contact.beacon,\r\n                id:     contact.beacon\r\n              }}\r\n            />)\r\n          }\r\n          })\r\n        }\r\n\r\n    return devices;\r\n  }\r\n  renderPopup = () => {\r\n    return this.state.popupInfo && (\r\n      <Popup tipSize={5}\r\n        anchor=\"bottom-right\"\r\n        longitude={this.state.popupInfo.state.longitude}\r\n        latitude={this.state.popupInfo.state.latitude}\r\n        onClose={() => this.setState({popupInfo: null})}\r\n        closeOnClick={true}>\r\n        <h4>{this.state.popupInfo.state.fullName}</h4>\r\n        <p>{this.state.popupInfo.incidentNumber} {this.state.popupInfo.disaster} incident(s)</p>\r\n        <div class=\"text-center\">\r\n        <img src={this.state.popupInfo.icon.imgUrl} style={{height: \"50px\"}} />\r\n        </div>\r\n      </Popup>\r\n\r\n      )\r\n  }\r\n\r\n  formatUnix = () => {\r\n    let unix = this.props.contactTrace[this.state.value].key\r\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    let date = new Date(unix*1000);\r\n    let year = date.getFullYear();\r\n    let month = months_arr[date.getMonth()];\r\n    let day = date.getDate();\r\n    let hours = date.getHours();\r\n    let minutes = \"0\" + date.getMinutes();\r\n    let seconds = \"0\" + date.getSeconds();\r\n    let convdataTime = day+'-'+month+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    return convdataTime\r\n  }\r\n  handleChange = (event, value) => {\r\n    this.setState({ value });\r\n\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    const {viewport} = this.state;\r\n    const { classes } = this.props;\r\n\r\n    let sourceOptions = this.state.sourceOptions\r\n\r\n    let imageURL = \"mapbox://styles/mapbox/dark-v9\";\r\n    let center = this.state.center\r\n    if(this.props.map != \"\") {\r\n\r\n    }\r\n    const { children, onLoad, map, height, width } = this.props;\r\n    let locationOrigin = window.location.origin\r\n\r\n    let style = {\r\n        version:  8,\r\n        name:     'custom',\r\n        sources:  {},\r\n        sprite:   `${locationOrigin}/mapbox-styles/maki`,\r\n        glyphs:   `${locationOrigin}/mapbox-styles/font/{fontstack}/{range}.pbf`,\r\n        layers:   []\r\n    }\r\n\r\n\r\n    // return (\r\n    //   <MapGL\r\n    //     {...viewport}\r\n    //     mapStyle={imageURL}\r\n    //     onViewportChange={this._updateViewport}\r\n    //     mapboxApiAccessToken={TOKEN} >\r\n    //     {/*markers*/}\r\n    //     {/*this.renderPopup()*/}\r\n    //\r\n    //   </MapGL>\r\n    // );\r\n    return (\r\n      <div>\r\n      <ReactMap\r\n      style={style}\r\n      center={center}\r\n      movingMethod={'jumpTo'}\r\n      ref={this.mapLocation}\r\n      containerStyle={{\r\n        height: '70vh',\r\n        width: '100%'}}\r\n      onStyleLoad={this.onStyleLoad}\r\n\r\n      >\r\n\r\n      <Layer type=\"symbol\"\r\n      id=\"staticDevices\"\r\n      layout={{\r\n        'icon-image':             'triangle-15',\r\n        'icon-allow-overlap':     true,\r\n        'icon-ignore-placement':  true,\r\n        'text-allow-overlap':     true,\r\n        'text-ignore-placement':  true,\r\n        'text-field':             '{title}',\r\n        'text-font':              ['Open Sans Semibold'],\r\n        'text-offset':            [0, 0.8],\r\n        'text-anchor':            'top',\r\n      }}>\r\n\r\n      {\r\n        this.state.staticDevices != \"\" ? this.renderDevices('static') : null\r\n      }\r\n      </Layer>\r\n\r\n      <Layer type=\"circle\"  paint={this.getInfectedCircle()}>\r\n      {\r\n        this.props.filterTrace != null ? this.renderInfectedCircle() : null\r\n      }\r\n      </Layer>\r\n\r\n      <Layer type=\"circle\"  paint={this.getCirclePaint()}>\r\n      {\r\n        //this.props.contactTrace != null ? this.renderDevices('mobile') : null\r\n         this.props.filterTrace != null ? this.renderHighlightDevices() : null\r\n      }\r\n      </Layer>\r\n      <Layer type=\"symbol\"\r\n      id=\"patientDevices\"\r\n      layout={{\r\n        'icon-image':             'marker-15',\r\n        'icon-allow-overlap':     true,\r\n        'icon-ignore-placement':  true,\r\n        'text-allow-overlap':     true,\r\n        'text-ignore-placement':  true,\r\n        'text-field':             '{title}',\r\n        'text-font':              ['Open Sans Semibold'],\r\n        'text-offset':            [0.6, 0.7],\r\n        'text-anchor':            'bottom-left',\r\n        'icon-size':  0.6,\r\n      }}>\r\n\r\n      {\r\n        this.props.contactTrace != null ? this.renderDevices('mobile') : null\r\n\r\n      }\r\n      </Layer>\r\n      {this.state.map != \"\" ?\r\n      <div>\r\n      <Source id=\"image_source\" tileJsonSource={sourceOptions} />\r\n      <Layer id=\"image_layer\" before=\"staticDevices\" type=\"raster\" sourceId=\"image_source\"/>\r\n      </div>\r\n      : null}\r\n\r\n    </ReactMap>\r\n\r\n    <Grid container justify=\"center\">\r\n    <Grid container\r\n      className={classes.demo}\r\n      justify=\"center\"\r\n      spacing={0}\r\n      alignItems=\"center\"\r\n      style={{overflowX: 'hidden'}}\r\n      >\r\n      <Grid item xs={12}>\r\n    <Typography variant=\"subtitle1\">{this.props.contactTrace != null ? this.formatUnix() : this.state.value}</Typography>\r\n\r\n    <Slider\r\n        value={this.state.value}\r\n        min={0}\r\n        max={this.state.max}\r\n        step={1}\r\n        onChange={this.handleChange}\r\n        />\r\n\r\n        {this.state.playback == false ? <Button onClick={this.startPlayback}> Playback </Button> :\r\n        <Button onClick={this.stopTimer}> Stop </Button>}\r\n        </Grid>\r\n        </Grid>\r\n        </Grid>\r\n    </div>\r\n  )\r\n  }\r\n\r\n}\r\nconst ConnectedContactTraceMap = connect(mapStateToProps, mapDispatchToProps)(ContactTraceMap);\r\n\r\nexport default withStyles(styles)(ConnectedContactTraceMap);\r\n"]},"metadata":{},"sourceType":"module"}