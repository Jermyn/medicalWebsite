{"ast":null,"code":"import _classCallCheck from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/Scanner.js\";\nimport React from \"react\";\nimport Quagga from 'quagga';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    },\n    drawingBuffer: {\n      display: 'none'\n    },\n    textField: {// marginLeft: theme.spacing.unit,\n      // marginRight: theme.spacing.unit,\n    },\n    borderBox: {\n      border: '1px solid',\n      padding: '2rem',\n      borderRadius: '16px'\n    },\n    menu: {\n      width: 200\n    },\n    menuButton: {\n      marginLeft: -12,\n      marginRight: 20,\n      opacity: 0.4,\n      color: 'black'\n    },\n    align: {\n      padding: \"\".concat(theme.spacing.unit * 2, \"px \").concat(theme.spacing.unit * 3, \"px \").concat(theme.spacing.unit * 3, \"px\")\n    }\n  };\n};\n\nvar Scanner =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Scanner, _React$Component);\n\n  function Scanner(props) {\n    var _this;\n\n    _classCallCheck(this, Scanner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scanner).call(this, props));\n\n    _this.handleVideo = function (stream) {// this.setState({\n      //   source: stream\n      // })\n    };\n\n    _this.videoError = function (err) {\n      console.log(err);\n    };\n\n    _this._onDetected = function (result) {\n      var drawingCanvas = Quagga.canvas.dom.overlay;\n      drawingCanvas.style.display = 'none';\n\n      _this.props.onDetected(result);\n    };\n\n    _this.state = {\n      source: ''\n    };\n    return _this;\n  }\n\n  _createClass(Scanner, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"interactive\",\n        className: \"viewport\",\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        className: \"videoCamera\",\n        autoPlay: true,\n        preload: \"auto\",\n        src: \"\",\n        muted: \"true\",\n        playsInLine: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        className: \"drawingBuffer\",\n        style: {\n          display: 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Quagga.init({\n        inputStream: {\n          type: \"LiveStream\",\n          constraints: {\n            width: 500,\n            height: 480,\n            facingMode: \"environment\" // or user\n\n          }\n        },\n        locator: {\n          patchSize: \"large\",\n          halfSample: true\n        },\n        numOfWorkers: 4,\n        decoder: {\n          readers: [\"code_128_reader\", \"code_39_reader\"]\n        },\n        locate: true\n      }, function (err) {\n        if (err) {\n          return console.log(err);\n        } // const drawingCanvas = Quagga.canvas.dom.overlay;\n        // drawingCanvas.style.display = 'none';\n\n\n        Quagga.start();\n      });\n      Quagga.onDetected(this._onDetected);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Quagga.offDetected(this._onDetected);\n      Quagga.stop();\n    }\n  }]);\n\n  return Scanner;\n}(React.Component);\n\n;\nScanner.propTypes = {\n  onDetected: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(Scanner);","map":{"version":3,"sources":["/Users/jermz/Desktop/eclipse-workspace/medicalWebsite/src/Scanner.js"],"names":["React","Quagga","PropTypes","withStyles","styles","theme","container","display","flexWrap","root","flexGrow","grow","drawingBuffer","textField","borderBox","border","padding","borderRadius","menu","width","menuButton","marginLeft","marginRight","opacity","color","align","spacing","unit","Scanner","props","handleVideo","stream","videoError","err","console","log","_onDetected","result","drawingCanvas","canvas","dom","overlay","style","onDetected","state","source","textAlign","init","inputStream","type","constraints","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","start","offDetected","stop","Component","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Quagga from 'quagga';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  drawingBuffer: {\r\n    display: 'none'\r\n  },\r\n  textField: {\r\n    // marginLeft: theme.spacing.unit,\r\n    // marginRight: theme.spacing.unit,\r\n  },\r\n  borderBox: {\r\n    border: '1px solid',\r\n    padding: '2rem',\r\n    borderRadius: '16px',\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n    opacity : 0.4,\r\n    color: 'black',\r\n  },\r\n  align: {\r\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\r\n  }\r\n});\r\n\r\nclass Scanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          source: ''\r\n        }\r\n    }\r\n\r\n    handleVideo = (stream) => {\r\n   // this.setState({\r\n   //   source: stream\r\n   // })\r\n }\r\n\r\n videoError = (err) => {\r\n   console.log(err)\r\n }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"interactive\" className=\"viewport\" style={{textAlign: 'center'}}>\r\n              <video  className=\"videoCamera\" autoPlay={true} preload=\"auto\" src=\"\" muted=\"true\"\r\n             playsInLine ></video>\r\n\r\n             <canvas className=\"drawingBuffer\" style={{display: 'none'}}></canvas>\r\n           </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        Quagga.init({\r\n            inputStream: {\r\n                type : \"LiveStream\",\r\n                constraints: {\r\n                    width: 500,\r\n                    height: 480,\r\n                    facingMode: \"environment\", // or user\r\n                }\r\n            },\r\n            locator: {\r\n                patchSize: \"large\",\r\n                halfSample: true\r\n            },\r\n            numOfWorkers: 4,\r\n            decoder: {\r\n                readers : [\"code_128_reader\", \"code_39_reader\"]\r\n            },\r\n            locate: true\r\n        }, function(err) {\r\n            if (err) {\r\n                return console.log(err);\r\n            }\r\n\r\n\r\n            // const drawingCanvas = Quagga.canvas.dom.overlay;\r\n            // drawingCanvas.style.display = 'none';\r\n            Quagga.start();\r\n        });\r\n\r\n        Quagga.onDetected(this._onDetected);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Quagga.offDetected(this._onDetected);\r\n        Quagga.stop();\r\n    }\r\n\r\n    _onDetected = (result) => {\r\n      const drawingCanvas = Quagga.canvas.dom.overlay;\r\n        drawingCanvas.style.display = 'none';\r\n        this.props.onDetected(result);\r\n    }\r\n};\r\n\r\nScanner.propTypes = {\r\n    onDetected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Scanner);\r\n"]},"metadata":{},"sourceType":"module"}